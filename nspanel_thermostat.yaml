# Set some variables for convenience
substitutions:
  node_name: nspanel
  device_name: NSPanel
  target_temp_normal: 21.0 °C
  target_temp_away: 18.0 °C

# Note: this may not be needed if the pull request has been merged.
# Check https://github.com/esphome/esphome/pull/2956 for current status.
external_components:
  - source: github://pr#2956
    components: [nextion]
    refresh: 1h

esphome:
  name: $node_name
  comment: $device_name

esp32:
  board: esp32dev

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Optional manual IP
  manual_ip:
    static_ip: 192.168.10.30
    gateway: 192.168.10.1
    subnet: 255.255.255.0
    
# Enable logging
logger:

# Enable wireless updates
ota:
  password: !secret ota_password

# Enable Home Assistant API
api:
  services:
    # Service to play a song
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
    - service: upload_tft
      then:
        - lambda: 'id(disp1)->upload_tft();'
    - service: send_command
      variables:
        cmd: string
      then:
        - lambda: 'id(disp1).send_command_printf("%s", cmd.c_str());'

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Europe/Madrid
    on_time:
      - seconds: 0
        minutes: '*'
        then:
          - lambda: |-
              id(disp1).set_component_text_printf("wind", "%i km/h", (int)id(wind_speed).state);
          - script.execute: tft_date_update
          - script.execute: tft_time_update
          - script.execute: tft_weather_update

      # just a little showcase of all the icons
#      - seconds: /2
#        then:
#          - lambda: |-
#              static int num = 3;
#              if (num < 12) num++; else num = 3;
#              id(disp1).send_command_printf("weather.pic=%i", num);

globals:
  - id: str_date
    type: char[16]
    restore_value: false
    initial_value: ""
  - id: str_time
    type: char[16]
    restore_value: false
    initial_value: ""
  - id: str_weather
    type: char[16]
    restore_value: false
    initial_value: ""
  - id: str_wind
    type: char[16]
    restore_value: false
    initial_value: ""
  - id: str_ext_temp
    type: char[16]
    restore_value: false
    initial_value: ""
  - id: str_int_temp
    type: char[16]
    restore_value: false
    initial_value: ""
    
# A reboot button is always useful
button:
  - platform: restart
    name: Restart $device_name

# Define some inputs
binary_sensor:
  # Switches between HEAT or OFF mode
  - platform: gpio
    name: $device_name Left Button
    pin:
      number: 14
      inverted: true
    on_press:
      then:
        - climate.control:
            id: caldera
            mode: !lambda |-
              if (id(caldera).mode==CLIMATE_MODE_OFF)
              {
                id(disp1).set_component_text_printf("btn0", "APAGAR");
                return CLIMATE_MODE_HEAT;
              }
              else
              {
                id(disp1).set_component_text_printf("btn0", "ENCENDER");
                return CLIMATE_MODE_OFF;
              }

  # Switches between a predefined "night" or "away" target temperature and a "normal" target temperature
  # this will be also automated in homeassistant, but it is nice to have a button for it
  - platform: gpio
    name: $device_name Right Button
    pin:
      number: 27
      inverted: true  
    on_press:
      then:
        - climate.control:
            id: caldera
            preset: !lambda |-
              if (id(caldera).preset==CLIMATE_PRESET_AWAY)
              {
                id(disp1).set_component_text_printf("btn1", "MODO NORMAL");
                return CLIMATE_PRESET_HOME;
              }
              else
              {
                id(disp1).set_component_text_printf("btn1", "MODO NOCHE");
                return CLIMATE_PRESET_AWAY;
              }

  - platform: nextion
    name: $device_name Up Button
    page_id: 0
    component_id: 6
    on_press:
      then:
        - climate.control:
            id: caldera
            target_temperature: !lambda "return id(caldera).target_temperature + 0.1;"
        - script.execute: tft_sleep_timeout


  - platform: nextion
    name: $device_name Down Button
    page_id: 0
    component_id: 7
    on_press:
      then:
        - climate.control:
            id: caldera
            target_temperature: !lambda "return id(caldera).target_temperature - 0.1;"
        - script.execute: tft_sleep_timeout

  # This is a workaround to get the sleep timeout working
  # ideally it should be handled by the 'touch_sleep_timeout' variable
  - platform: nextion
    name: $device_name bg0
    page_id: 0
    component_id: 1
    internal: true
    on_press:
      then:
        - script.execute: tft_sleep_timeout
  - platform: nextion
    name: $device_name intTemp
    page_id: 0
    component_id: 2
    internal: true
    on_press:
      then:
        - script.execute: tft_sleep_timeout
  - platform: nextion
    name: $device_name extTemp
    page_id: 0
    component_id: 3
    internal: true
    on_press:
      then:
        - script.execute: tft_sleep_timeout
  - platform: nextion
    name: $device_name time
    page_id: 0
    component_id: 4
    internal: true
    on_press:
      then:
        - script.execute: tft_sleep_timeout
  - platform: nextion
    name: $device_name setTemp
    page_id: 0
    component_id: 5
    internal: true
    on_press:
      then:
        - script.execute: tft_sleep_timeout
  - platform: nextion
    name: $device_name date
    page_id: 0
    component_id: 8
    internal: true
    on_press:
      then:
        - script.execute: tft_sleep_timeout
  - platform: nextion
    name: $device_name wind
    page_id: 0
    component_id: 9
    internal: true
    on_press:
      then:
        - script.execute: tft_sleep_timeout
  - platform: nextion
    name: $device_name weather
    page_id: 0
    component_id: 10
    internal: true
    on_press:
      then:
        - script.execute: tft_sleep_timeout
  - platform: nextion
    name: $device_name btn0
    page_id: 0
    component_id: 11
    internal: true
    on_press:
      then:
        - script.execute: tft_sleep_timeout
  - platform: nextion
    name: $device_name btn1
    page_id: 0
    component_id: 12
    internal: true
    on_press:
      then:
        - script.execute: tft_sleep_timeout      

sensor:
  - platform: wifi_signal
    name: $device_name WiFi Signal
    update_interval: 60s

  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db

  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    accuracy_decimals: 2
    filters:
      - median:
          window_size: 15
          send_every: 10
          send_first_at: 3
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    name: $device_name Temperature
    on_value:
      then:
        - lambda: |-
            char *strit = id(str_int_temp);
            sprintf(strit, "%.1f""\xb0", x);
            id(disp1).set_component_text_printf("intTemp", id(str_int_temp));

  # Grab current temperature from Home Assistant
  - platform: homeassistant
    id: ext_temperature
    entity_id: sensor.exterior_temperature
    attribute: temperature
    on_value:
      then:
        - lambda: |-
            char *stret = id(str_ext_temp);
            sprintf(stret, "%.1f""\xb0", x);
            id(disp1).set_component_text_printf("extTemp", id(str_ext_temp));

  - platform: homeassistant
    id: wind_speed
    entity_id: weather.aemet_daily
    attribute: wind_speed
    unit_of_measurement: "km/h"
    on_value:
      then:
        - lambda: |-
            char *strwind = id(str_wind);
            sprintf(strwind, "%i km/h""\xb0", (int)id(wind_speed).state);
            id(disp1).set_component_text_printf("wind", id(str_wind));

text_sensor:
  - platform: homeassistant
    id: current_weather
    entity_id: weather.aemet_daily
    on_value:
      then:
        - script.execute: tft_weather_update

script:
  - id: tft_weather_update
    then:
      - lambda: |-
          char const *wstr[] = {"clear-night", "cloudy", "fog",\
                                "lightning", "lightning-rainy", "partlycloudy",\
                                "pouring", "rainy", "snowy", "sunny"};
          int i = 0;
          while ((id(current_weather).state!=wstr[i])&&(i<12)) {i++;}
          id(disp1).send_command_printf("weather.pic=%i", i+3);
          id(disp1).set_component_text_printf("wind", "%i km/h", (int)id(wind_speed).state);
  - id: tft_date_update
    then:
      - lambda: |-
          int dia = id(homeassistant_time).now().day_of_month;
          int mes = id(homeassistant_time).now().month;
          char const *dia_semana[] = {"Domingo", "Lunes", "Martes", "Mierco.", "Jueves", "Viernes", "Sabado"};
          const char *str = dia_semana[id(homeassistant_time).now().day_of_week-1]; // range [1-7], Domingo=1
          char *strd = id(str_date);
          sprintf(strd, "%s %02i/%02i", str, dia, mes);
          id(disp1).set_component_text_printf("date", id(str_date));
  - id: tft_time_update
    then:
      - lambda: |-
          char *strt = id(str_time);
          sprintf(strt, "%s", id(homeassistant_time).now().strftime("%H:%M").c_str());
          id(disp1).set_component_text_printf("time", id(str_time));
  - id: tft_sleep_timeout
    mode: restart
    then:
      if:
        condition:
          switch.is_on: auto_sleep
        then:
          - delay: 30 s
          - lambda: |-
              id(disp1).send_command_printf("sleep=1");

# Define some outputs
switch:
  # Relay 2 is the thermostat switch, Relay 1 was physically removed!
  - platform: gpio
    name: $device_name Relay
    id: relay_2
    internal: true # it should not be activated directly by home assitant
    pin:
      number: 19

  # Pin 4 always needs to be on to power up the display
  - platform: gpio
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON

  - platform: template
    name: $device_name auto sleep
    id: auto_sleep
    restore_state: true
    optimistic: true
    on_turn_on:
      - script.execute: tft_sleep_timeout
    on_turn_off:
      - script.stop: tft_sleep_timeout
      - lambda: 'id(disp1).send_command_printf("sleep=0");'
    turn_on_action:
      - script.execute: tft_sleep_timeout
    turn_off_action:
      - script.stop: tft_sleep_timeout
      - lambda: 'id(disp1).send_command_printf("sleep=0");'

number:
  - platform: template
    name: $device_name Brightness
    id: brightness
    entity_category: config
    unit_of_measurement: '%'
    icon: "mdi:brightness-percent"
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 30
    set_action:
      then:
        - lambda: 'id(disp1).set_backlight_brightness(x/100);'

# Configure the internal bleeper
output:
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21

# Enable ringtone music support
rtttl:
  id: buzzer
  output: buzzer_out

# Configure UART for communicating with the screen
uart:
  id: tf_uart
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200

# Configure the screen
display:
  - platform: nextion
    id: disp1
    uart_id: tf_uart
    tft_url: !secret panel_file
    touch_sleep_timeout: 30 # does not seem to work... we will do it with a script
    auto_wake_on_touch: true
    on_wake:
      then:
        - lambda: |-
            id(disp1).set_component_text_printf("extTemp", id(str_ext_temp));
            id(disp1).set_component_text_printf("intTemp", id(str_int_temp));
            id(disp1).set_component_text_printf("wind", id(str_wind));
            id(disp1).set_component_text_printf("setTemp", "%.1f""\xb0", id(caldera).target_temperature);
        - script.execute: tft_date_update
        - script.execute: tft_time_update
        - script.execute: tft_weather_update
        - script.execute: tft_sleep_timeout
    on_setup:
      then:
        - number.set:
            id: brightness
            value: 30
        - lambda: |-
            id(disp1).set_component_text_printf(
              "intTemp", "%.1f""\xb0", id(temperature).state);
            id(disp1).set_component_text_printf(
              "extTemp", "%.1f""\xb0", id(ext_temperature).state);
            id(disp1).set_component_text_printf("btn0", "ENCENDER");
            id(disp1).set_component_text_printf("btn1", "MODO NOCHE");
        - script.execute: tft_date_update
        - script.execute: tft_time_update
        - script.execute: tft_weather_update
        - switch.turn_on: auto_sleep
        - script.execute: tft_sleep_timeout

#        - rtttl.play: "twobits:d=4,o=5,b=220:c6,8g,8g,a,g,p,b,c6"

# Single-point thermostat (for heating only)
climate:
  - platform: thermostat
    id: caldera
    name:  $device_name Thermostat
    sensor: temperature
    default_target_temperature_low: $target_temp_normal
    heat_deadband: 0.2
    heat_overrun: 0.2
    min_heating_off_time: 300s
    min_heating_run_time: 300s
    min_idle_time: 30s
    heat_action:
      - switch.turn_on: relay_2
    idle_action:
      - switch.turn_off: relay_2
    on_state:
      - lambda: 'id(disp1).set_component_text_printf("setTemp", "%.1f""\xb0", id(caldera).target_temperature);'
    visual:
      min_temperature: 10
      max_temperature: 30
      temperature_step: 0.1
    away_config:
      default_target_temperature_low: $target_temp_away





