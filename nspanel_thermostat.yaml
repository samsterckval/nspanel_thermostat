# Set some variables for convenience
substitutions:
  node_name: nspanel01
  device_name: NSPanel01
  target_temp_home: 21.0 °C
  target_temp_away: 15.0 °C
  ha_server_ip: 192.168.0.110
  relay_ip: 192.168.0.17
  tft_file_url: "http://${ha_server_ip}/local/nspanel_thermostat.tft"
  relay_base_url: "http://${relay_ip}/relay/0"
  relay_on_url: "${relay_base_url}?turn=on"
  relay_off_url: "${relay_base_url}?turn=off"

globals:
  - id: away_target
    type: float
    restore_value: true

  - id: home_target
    type: float
    restore_value: true

# It seems this is not needed anymore in the newer versions, however this is untested for new nspanels
# external_components:
#   - source: github://pr#5825
#     components: [nextion]
#     refresh: 1s

# Configure UART for communicating with the screen
uart:
  id: tf_uart
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200

# Configure the screen
display:
  - platform: nextion
    id: disp1
    uart_id: tf_uart
    tft_url: ${tft_file_url}
    on_setup:
      then:
        - number.set:
            id: brightness
            value: 30
        - lambda: |-
            id(disp1).set_component_text_printf(
              "page0.intTemp", "%.1f""\xb0", id(temperature).state);
            id(disp1).set_component_text_printf(
              "page0.extTemp", "%.1f""\xb0", id(ext_temperature).state);
            id(disp1).set_component_text_printf("page0.btn0", "VERWARMING");
            id(disp1).set_component_text_printf("page0.btn1", "LICHT");
        - script.execute: tft_date_update
        - script.execute: tft_time_update
        - script.execute: tft_weather_update

esphome:
  name: $node_name
  comment: $device_name
  friendly_name: nspanel01

  on_boot:
    priority: 200.0
    then:
      - logger.log: After boot check-up
      - wait_until:
          condition:
            - api.connected:
          timeout: 60s
      - wait_until:
          condition:
            - lambda: !lambda return disp1->is_setup();
          timeout: 20s
      - script.execute: exit_reparse
      - wait_until:
          condition:
            - lambda: !lambda return disp1->is_setup();
          timeout: 20s
      - lambda: |-
          static const char *const TAG = "on_boot";
          if (not disp1->is_setup()) {
            ESP_LOGE(TAG, "No response from Nextion display");
            ESP_LOGD(TAG, "Turn off Nextion");
            screen_power->turn_off();
            delay(1500);
            ESP_LOGD(TAG, "Turn on Nextion");
            screen_power->turn_on();
          }

esp32:
  board: esp32dev
  framework: 
    type: esp-idf
    

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Nspanel01 Fallback Hotspot"
    password: "wybynYtgSdwp"

  # Set manual static ip
  manual_ip:
    static_ip: 192.168.0.129
    gateway: 192.168.0.1
    subnet: 255.255.255.0
    
# Enable logging
logger:
  level: DEBUG
  logs:
    sensor: ERROR

http_request:
  useragent: esphome/device/nspanel01
  timeout: 10s
  follow_redirects: false
  verify_ssl: false

# Enable Home Assistant API
api:  
  encryption:
    key: "9lZMgNXCcMn5pxVL6uPhabzGXztOg9eYqowlk/g2EZE="

  services:
    - service: upload_tft
      then:
        - lambda: 'id(disp1)->upload_tft();'
    - service: send_command
      variables:
        cmd: string
      then:
        - lambda: 'id(disp1).send_command_printf("%s", cmd.c_str());'

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Europe/Brussels
    on_time:
      - seconds: 0
        minutes: '*'
        then:
          - script.execute: tft_date_update
          - script.execute: tft_time_update
          - script.execute: tft_weather_update
    
# A reboot button is always useful
button:
  - platform: restart
    name: Restart $device_name

# Define some inputs
binary_sensor:
  # Switches between HEAT or OFF mode
  - platform: gpio
    name: $device_name Left Button
    pin:
      number: 14
      inverted: true
    on_press:
      then:
        - climate.control:
            id: heater
            preset: !lambda |-
              if (id(heater).preset==CLIMATE_PRESET_AWAY)
              {
                return CLIMATE_PRESET_HOME;
              }
              else
              {
                return CLIMATE_PRESET_AWAY;
              }
        - script.execute: tft_wake_up

  # Switch relay 1 for light
  - platform: gpio
    name: $device_name Right Button
    pin:
      number: 27
      inverted: true  
    on_press:
      then:
        - switch.toggle: relay_1
        - script.execute: tft_wake_up

  - platform: nextion
    name: $device_name Up Button
    page_id: 0
    component_id: 6
    on_press:
      then:
        - climate.control:
            id: heater
            target_temperature: !lambda "return floor((id(heater).target_temperature + 0.5) * 2.0)/2.0;"

  - platform: nextion
    name: $device_name Down Button
    page_id: 0
    component_id: 7
    on_press:
      then:
        - climate.control:
            id: heater
            target_temperature: !lambda "return floor((id(heater).target_temperature - 0.5) * 2.0)/2.0;"

sensor:
  - platform: wifi_signal
    name: $device_name WiFi Signal
    id: wifi_rssi
    update_interval: 60s
    on_value:
      # Push it to the display
      # RSSI is negative
      #  -0 - -50 => excellent  - wlan4 - pic id 21
      # -50 - -60 => good       - wlan3 - pic id 20
      # -60 - -70 => fair       - wlan2 - pic id 19
      # -70 - -85 => weak       - wlan1 - pic id 18
      # -85 - -90 => offline    - wlan0 - pic id 17
      then:
        - lambda: |-
            if  (id(wifi_rssi).state >= -50) {                                  id(disp1).set_component_pic("page0.picSignal", 21); }
            if ((id(wifi_rssi).state <  -50) && (id(wifi_rssi).state >= -60)) { id(disp1).set_component_pic("page0.picSignal", 20); }
            if ((id(wifi_rssi).state <  -60) && (id(wifi_rssi).state >= -70)) { id(disp1).set_component_pic("page0.picSignal", 19); }
            if ((id(wifi_rssi).state <  -70) && (id(wifi_rssi).state >= -85)) { id(disp1).set_component_pic("page0.picSignal", 18); }
            if  (id(wifi_rssi).state <  -85) {                                  id(disp1).set_component_pic("page0.picSignal", 17); }
# from https://github.com/darktim/ESPHome-NSPanel/blob/main/WiFi-Indicator.md

  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 12db

  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    accuracy_decimals: 2
    filters:
      - median:
          window_size: 15
          send_every: 10
          send_first_at: 3
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    name: $device_name Temperature
    on_value:
      then:
        - lambda: 'id(disp1).set_component_text_printf("page0.intTemp", "%.1f""\xb0", x);'

  # Grab current temperature from Home Assistant
  - platform: homeassistant
    id: ext_temperature
    entity_id: weather.buienradar
    attribute: temperature
    on_value:
      then:
        - lambda: 'id(disp1).set_component_text_printf("page0.extTemp", "%.1f""\xb0", x);'

  - platform: homeassistant
    id: wind_speed
    entity_id: weather.buienradar
    attribute: wind_speed
    unit_of_measurement: "km/h"
    on_value:
      then:
        - lambda: 'id(disp1).set_component_text_printf("page0.wind", "%i km/h""\xb0", (int)id(wind_speed).state);'

  - platform: nextion
    id: current_page
    name: "current_page"
    internal: true
    accuracy_decimals: 0
    variable_name: dp
    update_interval: 1s

  - platform: uptime
    name: Uptime Sensor

text_sensor:
  - platform: homeassistant
    id: current_weather
    entity_id: weather.buienradar
    on_value:
      then:
        - script.execute: tft_weather_update

script:
  - id: exit_reparse
    mode: restart
    then:
      - logger.log: "Exit reparse"
      - uart.write:
          id: tf_uart
          data: "DRAKJHSUYDGBNCJHGJKSHBDN"
      - uart.write:
          id: tf_uart
          data: [0xFF, 0xFF, 0xFF]

  - id: tft_weather_update
    then:
      - lambda: |-
          char const *wstr[] = {"clear-night", "cloudy", "fog",\
                                "lightning", "lightning-rainy", "partlycloudy",\
                                "pouring", "rainy", "snowy", "sunny"};
          int i = 0;
          if (id(current_weather).state=="unknown") return;
          while ((id(current_weather).state!=wstr[i])&&(i<9)) {i++;}
          if ((i>0)&&(i<10))
          {
            id(disp1).send_command_printf("page0.weather.pic=%i", i+3);
            id(disp1).set_component_text_printf("page0.wind", "%i km/h", (int)id(wind_speed).state);
          }
  - id: tft_date_update
    then:
      - lambda: |-
          int day = id(homeassistant_time).now().day_of_month;
          int month = id(homeassistant_time).now().month;
          if ((day>0)&&(day<32)&&(month>0)&&(month<13))
          {
            char const *weekdays[] = {"Zondag", "Maandag", "Dinsdag", "Woensdag.", "Donderdag", "Vrijdag", "Zaterdag"};
            const char *str = weekdays[id(homeassistant_time).now().day_of_week-1]; // range [1-7], Zondag=1
            id(disp1).set_component_text_printf("page0.date", "%s %02i/%02i", str, day, month);
          }
  - id: tft_time_update
    then:
      - lambda: 'id(disp1).set_component_text_printf("page0.time", "%s", id(homeassistant_time).now().strftime("%H:%M").c_str());'
  - id: tft_wake_up
    then:
      - lambda: |-
          id(disp1).send_command_printf("page0.sleep_cnt.val=page0.sleep_timeout.val");
          id(disp1).send_command_printf("page0.sleep_timer.en=1");
          if (id(current_page).state!=0)
            id(disp1).send_command_printf("page 0");
          id(disp1).send_command_printf("dim=page0.brightness.val");

# Define some outputs
switch:  
  - platform: gpio
    name: $device_name Relay1
    id: relay_1
    internal: False
    pin:
      number: 22

  # Pin 4 always needs to be on to power up the display
  - platform: gpio
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON

  - platform: template
    name: $device_name auto sleep
    id: auto_sleep
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    on_turn_on:
      - lambda: 'id(disp1).send_command_printf("page0.disable_sleep.val=0");'
    on_turn_off:
      - lambda: 'id(disp1).send_command_printf("page0.disable_sleep.val=1");'

number:
  - platform: template
    name: $device_name Brightness
    id: brightness
    entity_category: config
    unit_of_measurement: '%'
    icon: "mdi:brightness-percent"
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 30
    set_action:
      then:
        - lambda: |-
            id(disp1).send_command_printf("page0.sleep_timer.en=1");
            if (id(current_page).state!=0)
              id(disp1).send_command_printf("page 0");
            id(disp1).set_backlight_brightness(x/100);
  # Sets the sleep timer value
  # requires code running in the nextion tft to make a 1 second period timer
  # with a counter and a variable to store the timeout
  - platform: template
    name: $device_name Sleep timeout
    id: sleep_timeout
    entity_category: config
    unit_of_measurement: 's'
    icon: "mdi:timer"
    min_value: 3
    max_value: 300
    step: 1
    initial_value: 30
    set_action:
      then:
        - lambda: |-
            id(disp1).send_command_printf("page0.sleep_timeout.val=%i", (int)x);  // set the timeout
            id(disp1).send_command_printf("page0.sleep_cnt.val=%i", (int)x);      // reset the counter to its maximum


# Single-point thermostat (for heating only)
climate:
  - platform: thermostat
    id: heater
    name:  $device_name Thermostat
    sensor: temperature
    preset:
      # Normal heating temperature
      - name: home
        default_target_temperature_low: $target_temp_home
      - name: away
        default_target_temperature_low: $target_temp_away
    heat_deadband: 0.1
    heat_overrun: 0.0
    min_heating_off_time: 30s
    min_heating_run_time: 30s
    min_idle_time: 1s
    heat_action:
      - http_request.post:
          url: ${relay_on_url}
          on_error:
            - logger.log: "Heating action failed!"
    idle_action:
      - http_request.post:
          url: ${relay_off_url}
          on_error:
            - logger.log: "Idle action failed!"
    on_control:
      - lambda: |- 
          static auto last_preset = x.get_preset().value_or(CLIMATE_PRESET_AWAY);
          static auto last_temperature = 0.0F;

          if ( x.get_preset().has_value() && (x.get_preset().value() != last_preset) )
          {
            /**********************************/
            /*  This means we changed preset  */
            /**********************************/

            ESP_LOGD("climate", "State '%s' -> '%s'",
                                  climate::climate_preset_to_string(last_preset),
                                  climate::climate_preset_to_string(x.get_preset().value()));

            last_preset = x.get_preset().value();

            switch(last_preset)
            {
              case CLIMATE_PRESET_AWAY:
                {
                  x.set_target_temperature(id(away_target));
                  id(disp1).set_component_pic("page0.picBurn", 22);
                  break;
                }
              case CLIMATE_PRESET_HOME:
                {
                  x.set_target_temperature(id(home_target));
                  id(disp1).set_component_pic("page0.picBurn", 13);
                  break;
                }
              default:
                {
                  ESP_LOGD("climate", "unknown preset set");
                }
            }

            ESP_LOGD("climate", "Loaded %s temperature %.1f°C", climate::climate_preset_to_string(last_preset), x.get_target_temperature().value());
            last_temperature = x.get_target_temperature().value();
          }
          else
          {
            /**********************************************************/
            /*  This means this is at most just a temperature adjust  */
            /*  in this case, save it to the correct global.          */
            /**********************************************************/

            if ( x.get_target_temperature().has_value() && (x.get_target_temperature().value() != last_temperature) )
            {
              ESP_LOGD("climate", "Target temperature changed from %.1f°C to %.1f°C",
                     last_temperature, x.get_target_temperature().value());
              
              last_temperature = x.get_target_temperature().value();

              switch( id(heater).preset.value_or(CLIMATE_PRESET_NONE) )
              {
                case CLIMATE_PRESET_HOME:
                  {
                    id(home_target) = last_temperature;  // Save home target
                    break;
                  }
                case CLIMATE_PRESET_AWAY:
                  {
                    id(away_target) = last_temperature;  // Save away target
                    break;
                  }
                default:
                  {
                    ESP_LOGD("climate", "unknown preset set");
                  }
              }

              ESP_LOGD("climate", "Saved %s temperature %.1f°C",
                                    climate::climate_preset_to_string(id(heater).preset.value_or(CLIMATE_PRESET_NONE)),
                                    last_temperature);
            }
          }

          // Set the front end display text
          id(disp1).set_component_text_printf("page0.setTemp", "%.1f""\xb0", x.get_target_temperature().value_or(id(heater).target_temperature));

    visual:
      min_temperature: 10
      max_temperature: 30
      temperature_step: 0.1
