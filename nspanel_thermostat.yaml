# Set some variables for convenience
substitutions:
  node_name: nspanel
  device_name: NSPanel
  target_temp_home: 21.0 °C
  target_temp_eco: 18.0 °C

esphome:
  name: $node_name
  comment: $device_name

esp32:
  board: esp32dev

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Optional manual IP
  manual_ip:
    static_ip: 192.168.10.30
    gateway: 192.168.10.1
    subnet: 255.255.255.0
    
# Enable logging
logger:
  level: DEBUG
  logs:
    sensor: ERROR

# Enable wireless updates
ota:
  password: !secret ota_password

# Enable Home Assistant API
api:
  services:
    # Service to play a song
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
    - service: upload_tft
      then:
        - lambda: 'id(disp1)->upload_tft();'
    - service: send_command
      variables:
        cmd: string
      then:
        - lambda: 'id(disp1).send_command_printf("%s", cmd.c_str());'

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Europe/Madrid
    on_time:
      - seconds: 0
        minutes: '*'
        then:
          - script.execute: tft_date_update
          - script.execute: tft_time_update
          - script.execute: tft_weather_update
    
# A reboot button is always useful
button:
  - platform: restart
    name: Restart $device_name

# Define some inputs
binary_sensor:
  # Switches between HEAT or OFF mode
  - platform: gpio
    name: $device_name Left Button
    pin:
      number: 14
      inverted: true
    on_press:
      then:
        - climate.control:
            id: caldera
            mode: !lambda |-
              if (id(caldera).mode==CLIMATE_MODE_OFF)
              {
                return CLIMATE_MODE_HEAT;
              }
              else
              {
                return CLIMATE_MODE_OFF;
              }
        - script.execute: tft_wake_up

  # Switches between a predefined "night" or "sleep" target temperature and a "normal" target temperature
  # this will be also automated in homeassistant, but it is nice to have a button for it
  - platform: gpio
    name: $device_name Right Button
    pin:
      number: 27
      inverted: true  
    on_press:
      then:
        - climate.control:
            id: caldera
            preset: !lambda |-
              if (id(caldera).preset==CLIMATE_PRESET_ECO)
              {
                return CLIMATE_PRESET_HOME;
              }
              else
              {
                return CLIMATE_PRESET_ECO;
              }
        - script.execute: tft_wake_up

  - platform: nextion
    name: $device_name Up Button
    page_id: 0
    component_id: 6
    on_press:
      then:
        - climate.control:
            id: caldera
            target_temperature: !lambda "return id(caldera).target_temperature + 0.1;"

  - platform: nextion
    name: $device_name Down Button
    page_id: 0
    component_id: 7
    on_press:
      then:
        - climate.control:
            id: caldera
            target_temperature: !lambda "return id(caldera).target_temperature - 0.1;"

sensor:
  - platform: wifi_signal
    name: $device_name WiFi Signal
    id: wifi_rssi
    update_interval: 60s
    on_value:
      # Push it to the display
      # RSSI is negative
      #  -0 - -50 => excellent  - wlan4 - pic id 21
      # -50 - -60 => good       - wlan3 - pic id 20
      # -60 - -70 => fair       - wlan2 - pic id 19
      # -70 - -85 => weak       - wlan1 - pic id 18
      # -85 - -90 => offline    - wlan0 - pic id 17
      then:
        - lambda: |-
            if  (id(wifi_rssi).state >= -50) {                                  id(disp1).set_component_pic("page0.picSignal", 21); }
            if ((id(wifi_rssi).state <  -50) && (id(wifi_rssi).state >= -60)) { id(disp1).set_component_pic("page0.picSignal", 20); }
            if ((id(wifi_rssi).state <  -60) && (id(wifi_rssi).state >= -70)) { id(disp1).set_component_pic("page0.picSignal", 19); }
            if ((id(wifi_rssi).state <  -70) && (id(wifi_rssi).state >= -85)) { id(disp1).set_component_pic("page0.picSignal", 18); }
            if  (id(wifi_rssi).state <  -85) {                                  id(disp1).set_component_pic("page0.picSignal", 17); }
# from https://github.com/darktim/ESPHome-NSPanel/blob/main/WiFi-Indicator.md

  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db

  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    accuracy_decimals: 2
    filters:
      - median:
          window_size: 15
          send_every: 10
          send_first_at: 3
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    name: $device_name Temperature
    on_value:
      then:
        - lambda: 'id(disp1).set_component_text_printf("page0.intTemp", "%.1f""\xb0", x);'

  # Grab current temperature from Home Assistant
  - platform: homeassistant
    id: ext_temperature
    entity_id: sensor.exterior_temperature
    attribute: temperature
    on_value:
      then:
        - lambda: 'id(disp1).set_component_text_printf("page0.extTemp", "%.1f""\xb0", x);'

  - platform: homeassistant
    id: wind_speed
    entity_id: weather.aemet_daily
    attribute: wind_speed
    unit_of_measurement: "km/h"
    on_value:
      then:
        - lambda: 'id(disp1).set_component_text_printf("page0.wind", "%i km/h""\xb0", (int)id(wind_speed).state);'

  - platform: nextion
    id: current_page
    name: "current_page"
    internal: true
    accuracy_decimals: 0
    variable_name: dp
    update_interval: 1s

  - platform: uptime
    name: Uptime Sensor

text_sensor:
  - platform: homeassistant
    id: current_weather
    entity_id: weather.aemet_daily
    on_value:
      then:
        - script.execute: tft_weather_update

script:
  - id: tft_weather_update
    then:
      - lambda: |-
          char const *wstr[] = {"clear-night", "cloudy", "fog",\
                                "lightning", "lightning-rainy", "partlycloudy",\
                                "pouring", "rainy", "snowy", "sunny"};
          int i = 0;
          if (id(current_weather).state=="unknown") return;
          while ((id(current_weather).state!=wstr[i])&&(i<9)) {i++;}
          if ((i>0)&&(i<10))
          {
            id(disp1).send_command_printf("page0.weather.pic=%i", i+3);
            id(disp1).set_component_text_printf("page0.wind", "%i km/h", (int)id(wind_speed).state);
          }
  - id: tft_date_update
    then:
      - lambda: |-
          int dia = id(homeassistant_time).now().day_of_month;
          int mes = id(homeassistant_time).now().month;
          if ((dia>0)&&(dia<7)&&(mes>0)&&(mes<13))
          {
            char const *dia_semana[] = {"Domingo", "Lunes", "Martes", "Mierco.", "Jueves", "Viernes", "Sabado"};
            const char *str = dia_semana[id(homeassistant_time).now().day_of_week-1]; // range [1-7], Domingo=1
            id(disp1).set_component_text_printf("page0.date", "%s %02i/%02i", str, dia, mes);
          }
  - id: tft_time_update
    then:
      - lambda: 'id(disp1).set_component_text_printf("page0.time", "%s", id(homeassistant_time).now().strftime("%H:%M").c_str());'
  - id: tft_wake_up
    then:
      - lambda: |-
          id(disp1).send_command_printf("page0.sleep_cnt.val=page0.sleep_timeout.val");
          id(disp1).send_command_printf("page0.sleep_timer.en=1");
          if (id(current_page).state!=0)
            id(disp1).send_command_printf("page 0");
          id(disp1).send_command_printf("dim=page0.brightness.val");

# Define some outputs
switch:
  # Relay 2 is the thermostat switch, Relay 1 was physically removed!
  - platform: gpio
    name: $device_name Relay
    id: relay_2
    internal: true # it should not be activated directly by home assitant
    pin:
      number: 19

  # Pin 4 always needs to be on to power up the display
  - platform: gpio
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON

  - platform: template
    name: $device_name auto sleep
    id: auto_sleep
    entity_category: config
    restore_mode: ALWAYS_ON
    optimistic: true
    on_turn_on:
      - lambda: 'id(disp1).send_command_printf("page0.disable_sleep.val=0");'
    on_turn_off:
      - lambda: 'id(disp1).send_command_printf("page0.disable_sleep.val=1");'

number:
  - platform: template
    name: $device_name Brightness
    id: brightness
    entity_category: config
    unit_of_measurement: '%'
    icon: "mdi:brightness-percent"
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 30
    set_action:
      then:
        - lambda: |-
            id(disp1).send_command_printf("page0.sleep_timer.en=1");
            if (id(current_page).state!=0)
              id(disp1).send_command_printf("page 0");
            id(disp1).set_backlight_brightness(x/100);
  # Sets the sleep timer value
  # requires code running in the nextion tft to make a 1 second period timer
  # with a counter and a variable to store the timeout
  - platform: template
    name: $device_name Sleep timeout
    id: sleep_timeout
    entity_category: config
    unit_of_measurement: 's'
    icon: "mdi:timer"
    min_value: 3
    max_value: 300
    step: 1
    initial_value: 30
    set_action:
      then:
        - lambda: |-
            id(disp1).send_command_printf("page0.sleep_timeout.val=%i", (int)x);  // set the timeout
            id(disp1).send_command_printf("page0.sleep_cnt.val=%i", (int)x);      // reset the counter to its maximum

# Configure the internal bleeper
output:
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21

# Enable ringtone music support
rtttl:
  id: buzzer
  output: buzzer_out

# Configure UART for communicating with the screen
uart:
  id: tf_uart
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200

# Configure the screen
display:
  - platform: nextion
    id: disp1
    exit_reparse_on_start: true
    uart_id: tf_uart
    tft_url: !secret panel_file
    on_setup:
      then:
        - number.set:
            id: brightness
            value: 30
        - lambda: |-
            id(disp1).set_component_text_printf(
              "page0.intTemp", "%.1f""\xb0", id(temperature).state);
            id(disp1).set_component_text_printf(
              "page0.extTemp", "%.1f""\xb0", id(ext_temperature).state);
            id(disp1).set_component_text_printf("page0.btn0", "ENCENDER");
            id(disp1).set_component_text_printf("page0.btn1", "MODO ECO");
        - script.execute: tft_date_update
        - script.execute: tft_time_update
        - script.execute: tft_weather_update

#        - rtttl.play: "twobits:d=4,o=5,b=220:c6,8g,8g,a,g,p,b,c6"

# Single-point thermostat (for heating only)
climate:
  - platform: thermostat
    id: caldera
    name:  $device_name Thermostat
    sensor: temperature
    preset:
      # Sleep temperature
      - name: eco
        default_target_temperature_low: $target_temp_eco
      # Normal heating temperature
      - name: home
        default_target_temperature_low: $target_temp_home
    heat_deadband: 0.2
    heat_overrun: 0.2
    min_heating_off_time: 300s
    min_heating_run_time: 300s
    min_idle_time: 30s
    heat_action:
      - switch.turn_on: relay_2
    idle_action:
      - switch.turn_off: relay_2
    on_state:
      - lambda: |- 
          id(disp1).set_component_text_printf("page0.setTemp", "%.1f""\xb0", id(caldera).target_temperature);

          if (id(caldera).mode==CLIMATE_MODE_OFF)
            id(disp1).set_component_text_printf("page0.btn0", "ENCENDER");
          else
            id(disp1).set_component_text_printf("page0.btn0", "APAGAR");

          if (id(caldera).preset==CLIMATE_PRESET_ECO)
            id(disp1).set_component_text_printf("page0.btn1", "MODO ECO");
          else
            id(disp1).set_component_text_printf("page0.btn1", "MODO NORMAL");

          if (id(caldera).action==CLIMATE_ACTION_HEATING)
            id(disp1).set_component_pic("page0.picBurn", 13); 
          else
            id(disp1).set_component_pic("page0.picBurn", 22);
    visual:
      min_temperature: 10
      max_temperature: 30
      temperature_step: 0.1